// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ComponentHub.ApiClients.Models {
    public class ResponsePagination : IParsable {
        /// <summary>The currentPage property</summary>
        public int? CurrentPage { get; set; }
        /// <summary>The pageSize property</summary>
        public int? PageSize { get; set; }
        /// <summary>The totalItems property</summary>
        public int? TotalItems { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ResponsePagination CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ResponsePagination();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"currentPage", n => { CurrentPage = n.GetIntValue(); } },
                {"pageSize", n => { PageSize = n.GetIntValue(); } },
                {"totalItems", n => { TotalItems = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("currentPage", CurrentPage);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteIntValue("totalItems", TotalItems);
        }
    }
}
