@using MudExtensions.Enums
@using ComponentHub.ApiClients.Models
@using ComponentHub.Client.Components.Features.Components
@using ComponentHub.Client.Core
@using ComponentHub.Domain.Features.Users
@using Microsoft.AspNetCore.Authorization

@attribute [Route(Routes.Users.PrivateProfile)]
@attribute [Authorize]
@inject UserService UserService
@inject ComponentService ComponentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject CancellationService CancellationService 
@inject NavigationManager NavigationManager

@if (_userInfo is not null)
{
    <MudCard>
        <MudCardHeader>
            <MudTextM3 Typo="TypoM3.Headline" Color="Color.Primary">Hello @_userInfo.Name !</MudTextM3>
        </MudCardHeader>
        <MudCardContent>
            <MudPaper>
                <MudTextField 
                    T="string"
                    Margin="Margin.Dense"
                    @bind-Value="@_newUserName"
                    Validation="@((string name) => ApplicationUser.ValidationConstants.IsAllowedUserName(name))"
                    MaxLength="ApplicationUser.ValidationConstants.MaxUserNameLength"
                    Immediate
                />
            </MudPaper>
            <MudTooltip Text="This will download all the information we store about you. This does not include your components or comments.">
                <MudButton Variant="Variant.Filled" Color="Color.Info">Download Userdata</MudButton>
            </MudTooltip>
            <MudButton OnClick="@DeleteAccount" Variant="Variant.Filled" Color="Color.Warning">Delete Account</MudButton>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardHeader>
            <MudTextM3 Typo="TypoM3.Title">Your Components</MudTextM3>
        </MudCardHeader>
        <MudCardContent>
            <MudDataGrid 
                T="ComponentEntryDto"
                @bind-ref="@_tableRef"
                ServerData="@UpdateGridData"
                QuickFilter="@(arg => !(arg.Id is null || _isDeleted.Contains(arg.Id)))">
                <Columns>
                    <HierarchyColumn ButtonDisabledFunc="dto => dto.Description is null"/>
                    <PropertyColumn Property="arg => arg.Name"/>
                    <TemplateColumn>
                        <CellTemplate>
                            @if (context.Item?.Name is not null && _userInfo.Name is not null)
                            {
                                <MudLink Href="@Routes.Components.GetComponentPage(context.Item.Name, _userInfo.Name)"></MudLink>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="arg => arg.CreatedAt"/>
                    <PropertyColumn Property="arg => arg.UpdatedAt"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudButton OnClick="@(() => DeleteComponent(context.Item))" Variant="Variant.Filled" Color="Color.Warning">
                                DELETE
                            </MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <ChildRowContent>
                    @context.Item.Description
                </ChildRowContent>
                <PagerContent>
                    <MudDataGridPager/>
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Href="@Routes.Components.Upload">NEW COMPONENT</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    private GetDetailedUserInfoResponse? _userInfo;
    private string _newUserName = "";
    private readonly HashSet<string> _isDeleted = [];
    private MudDataGrid<ComponentEntryDto> _tableRef;

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await UserService.GetDetailedUserInfo();
    }

    private async Task<GridData<ComponentEntryDto>> UpdateGridData(GridState<ComponentEntryDto> state)
    {
        if (_userInfo?.Name is null)
        {
            return new GridData<ComponentEntryDto>();
        }

        var data = await ComponentService.GetByUser(_userInfo.Name, page: state.Page, pageSize: state.PageSize, CancellationService.Token);
        return new GridData<ComponentEntryDto>()
        {
            Items = data.data,
            TotalItems = data.overallCount
        };
    }

    private async Task DeleteComponent(ComponentEntryDto? componentEntryDto)
    {
        var dialogParams = ConfirmationDialog.CreateParameters("Are you sure? This CANNOT be undone?");
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>($"Delete {componentEntryDto?.Name}?", dialogParams);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            Snackbar.Add("Component not deleted", Severity.Info);
            return;
        }
        
        if (componentEntryDto?.Id is null)
        {
            Snackbar.Add("Component ID was empty, there is nothing you can do", Severity.Warning);
            return;
        }
        await ComponentService.Delete(componentEntryDto.Id).ConfigureAwait(false);
        _isDeleted.Add(componentEntryDto.Id);
        Snackbar.Add("Component Deleted Successfully", Severity.Success);
    }

    private async Task DeleteAccount()
    {
        var result = await ConfirmationDialog.Show(DialogService, "You are about to delete your account including all of your components!", "Confirm Deletion");

        if (result.Canceled)
        {
            Snackbar.Add("Deletion aborted", Severity.Info);
            return;
        }

        var deletion = await UserService.DeleteAccount(CancellationService.Token);

        if (deletion?.IsDeleted is null || !deletion.IsDeleted.Value)
        {
            Snackbar.Add("Account Deletion Failed", Severity.Error);
            return;
        }

        Snackbar.Add("Account Deleted", Severity.Success);
        NavigationManager.NavigateTo("/");
    }
}