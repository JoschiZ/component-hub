@using MudExtensions.Enums
@using ComponentHub.ApiClients.Models
@using ComponentHub.Client.Components.Features.Components
@using ComponentHub.Client.Core
@using ComponentHub.Domain.Features.Users

@attribute [Route(Routes.Users.PrivateProfile)]
@attribute [Route(Routes.Users.PublicProfile)]

@inject UserService UserService
@inject ComponentService ComponentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject CancellationService CancellationService 
@inject NavigationManager NavigationManager

@if (UserName is not null)
{
    <MudPaper Outlined Style="margin-bottom: 1rem">
        <MudTextM3 Typo="TypoM3.Headline" Color="Color.Primary">Hello @(UserName)</MudTextM3>
    </MudPaper>
    
    
    <BelongsToCurrentUserView Name="@UserName">
            <MudCard Style="margin-bottom: 1rem">
                <MudCardContent>
                    <MudPaper Elevation="0" Style="margin-bottom: 0.5rem">
                        <MudForm @ref="@_changeUsernameForm" @bind-IsValid="@_changeUsernameFormIsValid">
                            <MudStack Row Spacing="5" AlignItems="AlignItems.Baseline" Justify="Justify.FlexEnd">
                                <MudTextField
                                    T="string"
                                    Margin="Margin.Dense"
                                    @bind-Value="@_newUserName"
                                    Validation="@ApplicationUser.Validation.UsernameValidator.Validation"
                                    MaxLength="ApplicationUser.Validation.MaxUserNameLength"
                                    DisableUnderLine
                                    Immediate
                                    Variant="Variant.Outlined"/>
                                <MudButton
                                    Variant="Variant.Filled"
                                    Disabled="@(!_changeUsernameFormIsValid)"
                                    OnClick="@ChangeUsername"
                                    DisableElevation>
                                    Change Username
                                </MudButton>
                            </MudStack>
                        </MudForm>
        
                    </MudPaper>
                    <MudStack Row Spacing="5" Justify="Justify.FlexEnd">
                        <MudTooltip Text="This will download all the information we store about you. This does not include your components or comments.">
                            <MudButton Variant="Variant.Filled" Color="Color.Info" Href="@Endpoints.Users.DownloadUserdata">Download Userdata</MudButton>
                        </MudTooltip>
                        <MudButton OnClick="@DeleteAccount" Variant="Variant.Filled" Color="Color.Warning">Delete Account</MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
    </BelongsToCurrentUserView>
    <MudCard>
        <MudCardHeader>
            <MudTextM3 Typo="TypoM3.Title">Your Components</MudTextM3>
        </MudCardHeader>
        <MudCardContent>
            <MudDataGrid 
                T="ComponentPageDto"
                @bind-ref="@_tableRef"
                ServerData="@UpdateGridData">
                <Columns>
                    <HierarchyColumn ButtonDisabledFunc="dto => dto.Description is null"/>
                    <TemplateColumn>
                        <CellTemplate>
                            @if (context.Item?.Name is not null)
                            {
                                <MudLink Href="@Routes.Components.GetComponentPage(UserName, context.Item.Name)">@context.Item.Name</MudLink>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="arg => arg.CreatedAt"/>
                    <PropertyColumn Property="arg => arg.UpdatedAt"/>
                    <BelongsToCurrentUserView Name="@UserName">
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButton OnClick="@(() => DeleteComponent(context.Item))" Variant="Variant.Filled" Color="Color.Warning">
                                    DELETE
                                </MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </BelongsToCurrentUserView>
                </Columns>
                <ChildRowContent>
                    @context.Item.Description
                </ChildRowContent>
                <PagerContent>
                    <MudDataGridPager/>
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Href="@Routes.Components.Upload">NEW COMPONENT</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    private string _newUserName = "";
    private readonly HashSet<string> _isDeleted = [];
    private MudDataGrid<ComponentPageDto>? _tableRef;
    private bool _changeUsernameFormIsValid;
    private MudForm? _changeUsernameForm;
    
    [Parameter]
    public string? UserName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (UserName is null)
        {
            var userInfo = await UserService.GetDetailedUserInfo();
            UserName = userInfo.Name;
            return;
        }

        var userSearch = await UserService.Query(UserName, 0, 1);
        if (userSearch.Count == 0)
        {
            NavigationManager.NavigateTo(Routes.General.NotFound);
            return;
        }
    }

    private async Task<GridData<ComponentPageDto>> UpdateGridData(GridState<ComponentPageDto> state)
    {
        if (UserName is null)
        {
            return new GridData<ComponentPageDto>();
        }

        var data = await ComponentService.GetByUser(UserName, page: state.Page, pageSize: state.PageSize, CancellationService.Token);
        return new GridData<ComponentPageDto>()
        {
            Items = data.data,
            TotalItems = data.overallCount
        };
    }

    private async Task DeleteComponent(ComponentPageDto? componentEntryDto)
    {
        var dialogParams = ConfirmationDialog.CreateParameters("Are you sure? This CANNOT be undone?");
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>($"Delete {componentEntryDto?.Name}?", dialogParams);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            Snackbar.Add("Component not deleted", Severity.Info);
            return;
        }
        
        if (componentEntryDto?.Id is null)
        {
            Snackbar.Add("Component ID was empty, there is nothing you can do", Severity.Warning);
            return;
        }
        await ComponentService.Delete(componentEntryDto.Id).ConfigureAwait(false);
        _isDeleted.Add(componentEntryDto.Id);
        Snackbar.Add("Component Deleted Successfully", Severity.Success);
        
        // Sadly MudBlazor disabled QuickFilter of DataGrids if used with ServerData..... now we need to reload the whole table.
        if (_tableRef != null) await _tableRef.ReloadServerData();
    }

    private async Task DeleteAccount()
    {
        var result = await ConfirmationDialog.Show(DialogService, "You are about to delete your account including all of your components!", "Confirm Deletion");

        if (result.Canceled)
        {
            Snackbar.Add("Deletion aborted", Severity.Info);
            return;
        }

        var deletion = await UserService.DeleteAccount(CancellationService.Token);

        if (deletion?.IsDeleted is null || !deletion.IsDeleted.Value)
        {
            Snackbar.Add("Account Deletion Failed", Severity.Error);
            return;
        }

        Snackbar.Add("Account Deleted", Severity.Success);
        NavigationManager.NavigateTo("/");
    }

    private async Task ChangeUsername()
    {
        _changeUsernameForm?.Validate();
        if (!_changeUsernameFormIsValid)
        {
            return;
        }
        
        var result = await ConfirmationDialog.Show(DialogService, $"Do you really want to change your name from {UserName} to {_newUserName}?", "Change name");
        if (result.Canceled)
        {
            Snackbar.Add("Username not changed", Severity.Info);
            return;
        }

        var change = await UserService.ChangeUsername(_newUserName);

        if (change)
        {
            var userInfo = await UserService.GetDetailedUserInfo();
            UserName = userInfo.Name;
            Snackbar.Add($"Username changed to {_newUserName}", Severity.Success);
        }
    }
}