@attribute [Route(Routes.Components.Upload)]
@using ComponentHub.ApiClients.Models
@using ComponentHub.Client.Core
@using ComponentHub.Domain.Features.Components
@using Microsoft.AspNetCore.Authorization
@inject ComponentService Service
@inject ISnackbar Snackbar
@inject RedirectHelper RedirectHelper
@inject SharingService<CreateComponentResponse> Share
@attribute [Authorize]

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h4">Create a new Component</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudFocusTrap>
            <MudForm @ref="@_form" Model="_requestModel">
                        <MudTextField Label="Name" Required="true" @bind-Value="_requestModel.Name"/>
                        <MudTextField AutoGrow Lines="5" Label="Description" Required="true" @bind-Value="_requestModel.Description"/>
                        <MudTextField AutoGrow Lines="5" Label="Source Code" Required="true" @bind-Value="_requestModel.SourceCode"/>
                        <MudNumericField Min="1" Max="10" Label="Height" @bind-Value="@_requestModel.Height"/>
                        <MudNumericField Min="1" Max="10" Label="Width" @bind-Value="@_requestModel.Width"/>
                    </MudForm>    
            </MudFocusTrap>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@SubmitComponent">Create</MudButton>
        <MudButton Color="Color.Secondary" Variant="@Variant.Outlined" OnClick="@ShowDialog">Import Component</MudButton>
    </MudCardActions>
</MudCard>


<MudDialog @bind-IsVisible="@_isDialogOpen" Options="@_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Enter import string</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField 
            Variant="Variant.Outlined" 
            @bind-Value="@_importString" 
            @bind-Error="@_dialogInputError"
            HelperText="Insert your component export string"/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="@FillFromImportString">Fill from Export</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private readonly CreateComponentRequest _requestModel = new()
    {
        Height = 2,
        Width = 1,
        Description = ""
    };

    private bool _isDialogOpen;
    private readonly DialogOptions _dialogOptions = new(){CloseOnEscapeKey = true, CloseButton = true};
    private void ShowDialog() => _isDialogOpen = true;
    private bool _dialogInputError;
    
    
    private MudForm? _form;
    private string _importString = "";

    private async Task SubmitComponent()
    {
        if (_form is null || !_form.IsValid)
        {
            // Show validation Errors here later on or some kind of feedback
            return;
        }

        Snackbar.Add("Creating Component", Severity.Info);
        var response = await Service.CreateComponent(_requestModel);

        if (response is not null)
        {
            Snackbar.Add("Component Created", Severity.Success);
            var shareId = Share.AddItemToStorage(response);
            RedirectHelper.Redirect($"/{response.Entry?.OwnerName}/components/{response.Entry?.Name}", new Dictionary<string, string?>(){{"shareId", shareId}});
            return;
        }

        Snackbar.Add("Unknown Error", Severity.Error);
    }
    private Task FillFromImportString()
    {
        var componentResult = Component.DecodeExportString(_importString);

        if (componentResult.IsError)
        {
            Snackbar.Add(componentResult.Error.Description, Severity.Warning);
            _dialogInputError = true;
            _importString = "";
            return Task.CompletedTask;
        }
        
        var component = componentResult.ResultObject;
        _requestModel.SourceCode = component.Source.Script;
        _requestModel.Width = component.Width;
        _requestModel.Height = component.Height;
        _requestModel.WclComponentId = component.WclComponentId.ToString();
        
        
        _isDialogOpen = false;
        _dialogInputError = false;
        
        return Task.CompletedTask;
    }
    
    
}