@attribute [Route(Routes.Components.Upload)]
@using ComponentHub.ApiClients.Models
@using ComponentHub.Client.Core
@using ComponentHub.Domain.Features.Components
@using Microsoft.AspNetCore.Authorization

@inject ComponentService Service
@inject ISnackbar Snackbar
@inject RedirectHelper RedirectHelper
@inject SharingService<(ComponentPageDto pageDto, ComponentDto componentDto)> Share
@attribute [Authorize]

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h4">Create a new Component</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @ref="@_form" Model="_requestModel">
            <MudTextField 
                Label="Name" 
                Required="true" 
                @bind-Value="_requestModel.Name"
                MaxLength="Component.Validator.MaxNameLength"
                Counter="Component.Validator.MaxNameLength"
                Immediate/>
            <MudTextField 
                Variant="Variant.Outlined"
                AutoGrow Lines="3" 
                Label="Description" 
                Required="true" 
                @bind-Value="_requestModel.Description"
                MaxLength="Domain.Features.Components.ComponentPage.Validator.MaxDescriptionLength"
                Counter="Domain.Features.Components.ComponentPage.Validator.MaxDescriptionLength"
                Immediate/>
            <MudTextField 
                Variant="Variant.Outlined"
                AutoGrow 
                Lines="3"
                MaxLines="40"
                Label="Source Code" 
                Required="true"
                @bind-Value="_requestModel.SourceCode"
                MaxLength="ComponentSource.Validator.MaxSourceLength"
                Counter="ComponentSource.Validator.MaxSourceLength"
                Immediate/>
            <MudStack Row AlignItems="AlignItems.Baseline">
                <MudNumericField Min="1" Max="10" Label="Height" @bind-Value="@_requestModel.Height"/>
                <MudNumericField Min="1" Max="10" Label="Width" @bind-Value="@_requestModel.Width"/>
                <MudTooltip Text="You can use Shift + Mousewheel to adjust the values">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.HelpOutline"/>
                </MudTooltip>
            </MudStack>
            <!--We need to use Nullable here because the shorthand notation doesn't work in Razor Type args-->


            
            <TagSelect
                Tags="_tags"
                SelectedTag="ComponentTagId.Warcraft"/>

        </MudForm>    
    </MudCardContent>
    <MudCardActions>
        <MudStack Row Spacing="4" Justify="Justify.FlexEnd">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@SubmitComponent">Create</MudButton>
            <MudButton Color="Color.Secondary" Variant="@Variant.Outlined" OnClick="@ShowDialog">Import Component</MudButton>
        </MudStack>
    </MudCardActions>
</MudCard>


<MudDialog @bind-IsVisible="@_isDialogOpen" Options="@_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Enter import string</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField 
            Variant="Variant.Outlined" 
            @bind-Value="@_importString" 
            @bind-Error="@_dialogInputError"
            HelperText="Insert your component export string"/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="@FillFromImportString">Fill from Export</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private readonly CreateComponentRequest _requestModel = new()
    {
        Height = 2,
        Width = 1,
        Description = ""
    };

    private bool _isDialogOpen;
    private readonly DialogOptions _dialogOptions = new(){CloseOnEscapeKey = true, CloseButton = true};
    private void ShowDialog() => _isDialogOpen = true;
    private bool _dialogInputError;
    
    private readonly HashSet<ComponentTagId> _tags = [];
    
    
    private MudForm? _form;
    private string _importString = "";

    private async Task SubmitComponent()
    {
        if (_form is null || !_form.IsValid)
        {
            // Show validation Errors here later on or some kind of feedback
            return;
        }

        if (_tags.Count == 0)
        {
            Snackbar.Add("Please select at least one Tag!", Severity.Error);
            return;
        }
        
        _requestModel.Tags = _tags.Cast<int?>().ToList();
        
        var response = await Service.CreateComponent(_requestModel);

        if (response is not null)
        {
            Snackbar.Add("Component Created", Severity.Success);
            var shareId = Share.AddItemToStorage((response.Page, response.Component));
            var redirectRoute = Routes.Components.GetComponentPage(response.Page?.OwnerName ?? "", response.Page?.Name ?? "");
            RedirectHelper.Redirect(redirectRoute, new Dictionary<string, string?>(){{"shareId", shareId}});
            return;
        }

        Snackbar.Add("Unknown Error", Severity.Error);
    }
    private Task FillFromImportString()
    {
        var componentResult = ComponentSource.DecodeExportString(_importString);

        if (componentResult.IsError)
        {
            Snackbar.Add(componentResult.Error.Description, Severity.Warning);
            _dialogInputError = true;
            _importString = "";
            return Task.CompletedTask;
        }
        
        var component = componentResult.ResultObject;
        _requestModel.SourceCode = component.Source.Script;
        _requestModel.Width = component.Width;
        _requestModel.Height = component.Height;
        _requestModel.WclComponentId = component.WclComponentId.ToString();
        
        
        _isDialogOpen = false;
        _dialogInputError = false;
        
        return Task.CompletedTask;
    }


}