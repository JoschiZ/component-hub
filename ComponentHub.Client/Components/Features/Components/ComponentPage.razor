@attribute [Route(Routes.Components.ComponentPage)]
@using ComponentHub.ApiClients.Models
@using ComponentHub.Client.Core
@using ComponentHub.Domain.Features.Components
@inject ComponentService ComponentService
@inject SharingService<CreateComponentResponse> Share
@inject NavigationManager NavManager

@if (_getResponse?.ComponentEntry is not null && _getResponse.CurrentComponent is not null)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h1" Color="Color.Primary">@_getResponse.ComponentEntry.Name</MudText>
            <UserDisplay UserName="@_getResponse.ComponentEntry.OwnerName"/>
            <MudStack Justify="Justify.Center" Spacing="4">
                <MudText>Created: <DateDisplay DateTime="_getResponse.ComponentEntry.CreatedAt"/></MudText>
                <MudText>Updated: <DateDisplay DateTime="_getResponse.ComponentEntry.UpdatedAt" /></MudText>
            </MudStack>
            <MudSpacer/>
        </MudCardHeader>
        <MudCardContent>
            <MudPaper Outlined>
                <MudText Typo="Typo.h3">Description</MudText>
                <MudText>@_getResponse.ComponentEntry.Description</MudText>
            </MudPaper>
            @if (_componentSource is not null)
            {
                <MudPaper Outlined>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudText Typo="Typo.h3">Source Code</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudCard>
                                <MudCardContent>
                                    <MudText>
                                        @_componentSource.Source
                                    </MudText>
                                </MudCardContent>
                                <MudStack Justify="Justify.Center" Spacing="4" Row>
                                    <MudText>Height: @_componentSource.Height</MudText>
                                    <MudText>Width: @_componentSource.Width</MudText>
                                </MudStack>
                                <MudText>ID: @_componentSource.WclComponentId</MudText>
                            </MudCard>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudPaper>    
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" OnClick="@ShowExportOverlay">Export Component</MudButton>
        </MudCardActions>
    </MudCard>
    
    
    <MudDialog @bind-Visible="@_isExportDialogVisible" Options="@_exportDialogOptions">
        <TitleContent>Export Component</TitleContent>
        <DialogContent>
            <MudTextField
                OnInternalInputChanged="() => _exportStringRef?.SelectAsync()"
                T="string"
                @ref="@_exportStringRef"
                ReadOnly
                Text="@_getResponse.CurrentComponent.ComponentSource"
                Adornment="Adornment.End"
                AdornmentIcon="@Icons.Material.Filled.StickyNote2"
                OnAdornmentClick="() => _exportStringRef?.SelectAsync()"
                />
        </DialogContent>
    </MudDialog>
}
else
{
    <MudProgressCircular Indeterminate Color="Color.Info" Size="Size.Large"></MudProgressCircular>
}




@code {
    [Parameter]
    public string? ComponentName { get; set; }
    
    [Parameter]
    public string? UserName { get; set; }
    
    [SupplyParameterFromQuery]
    public string? ShareId { get; set; }

    private bool _isExportDialogVisible;
    private void ShowExportOverlay() => _isExportDialogVisible = true;
    private MudTextField<string>? _exportStringRef;
    private readonly DialogOptions _exportDialogOptions = new() { CloseButton = true, CloseOnEscapeKey = true };
    
    private GetComponentResponse? _getResponse;
    private ComponentSource? _componentSource;

    protected override async Task OnParametersSetAsync()
    {
        if (ShareId is not null)
        {
            var shared = Share.GetItem(ShareId);
            
            _getResponse = new GetComponentResponse()
            {
                ComponentEntry = shared?.Entry, 
                CurrentComponent = shared?.Component
            };

            var encodedSource = _getResponse.CurrentComponent?.ComponentSource ?? "";
            _componentSource = Component.DecodeExportString(encodedSource).ResultObject;
        }
        
        if (_getResponse?.ComponentEntry is not null || UserName is null || ComponentName is null)
        {
            NavManager.NavigateTo(Routes.General.NotFound);
            return;
        }
        
        
        _getResponse = await ComponentService.GetComponent(UserName, ComponentName);
    }

}