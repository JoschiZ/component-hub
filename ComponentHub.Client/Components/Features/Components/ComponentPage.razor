@attribute [Route(Routes.Components.ComponentPage)]
@using ComponentHub.ApiClients.Models
@using ComponentHub.Client.Core
@using ComponentHub.Domain.Features.Components
@using MudExtensions.Enums
@inject ComponentService ComponentService
@inject SharingService<CreateComponentResponse> Share
@inject NavigationManager NavManager
@inject IJsApiService ClipBoardService
@inject ISnackbar SnackBar

@if (_getResponse?.ComponentPage is not null && _getResponse.CurrentComponent is not null)
{
    <MudCard>
        <MudCardHeader>
            <MudStack>
                <MudTextM3 Typo="TypoM3.Headline" Color="Color.Primary">@_getResponse.ComponentPage.Name</MudTextM3>
                <MudStack Row Justify="Justify.Center" Spacing="4">
                    <UserDisplay UserName="@_getResponse.ComponentPage.OwnerName"/>
                    <MudTextM3>Created: <DateDisplay DateTime="_getResponse.ComponentPage.CreatedAt"/></MudTextM3>
                    <MudTextM3>Updated: <DateDisplay DateTime="_getResponse.ComponentPage.UpdatedAt"/></MudTextM3>
                </MudStack>
                <MudChipSet>
                    @if (_getResponse.ComponentPage.Tags is not null)
                    {
                        @foreach (var tagDescription in _getResponse.ComponentPage.Tags)
                        { 
                            <TagChip>@tagDescription</TagChip>
                        }
                    }
                </MudChipSet>
            </MudStack>
            <MudSpacer/>
        </MudCardHeader>
        <MudCardContent>
            <MudPaper Elevation="0" Style="margin-bottom: 1rem">
                <MudTextM3 GutterBottom="true" Typo="TypoM3.Title">Description</MudTextM3>
                <MudTextField
                    Variant="Variant.Filled"
                    T="string"
                    ReadOnly
                    Lines="5"
                    MaxLines="30"
                    AutoGrow
                    Text="@_getResponse.ComponentPage.Description"
                    DisableUnderLine/>
            </MudPaper>
            @if (_componentSource is not null)
            {
                <MudPaper Elevation="0">
                    <MudExpansionPanels Dense Elevation="0">
                        <MudExpansionPanel>
                            <TitleContent>
                                <MudTextM3 Typo="TypoM3.Title">Source</MudTextM3>
                            </TitleContent>
                            <ChildContent>
                                <MudStack Spacing="4" Row>
                                    <MudTextM3>Height: @_componentSource.Height</MudTextM3>
                                    <MudTextM3>Width: @_componentSource.Width</MudTextM3>
                                    <MudSpacer/>
                                    <MudTextM3 Align="Align.Right" Typo="TypoM3.Label" Color="Color.Surface" Style="opacity: 0.3">ID: @_componentSource.WclComponentId</MudTextM3>
                                </MudStack>
                                <MudTextField
                                    Variant="Variant.Filled"
                                    ReadOnly
                                    Text="@_componentSource.Source.Script"
                                    Lines="5"
                                    MaxLines="30"
                                    AutoGrow
                                    T="string"
                                    DisableUnderLine/>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudPaper>    
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" OnClick="@ShowExportOverlay" FullWidth>Export Component</MudButton>
        </MudCardActions>
    </MudCard>
    
    
    <MudDialog @bind-IsVisible="@_isExportDialogVisible" Options="@_exportDialogOptions">
        <TitleContent>Export Component</TitleContent>
        <DialogContent>
            <MudTextField
                OnInternalInputChanged="() => _exportStringRef?.SelectAsync()"
                T="string"
                @ref="@_exportStringRef"
                ReadOnly
                Text="@_getResponse.CurrentComponent.ComponentSource"
                Adornment="Adornment.End"
                AdornmentIcon="@Icons.Material.Filled.StickyNote2"
                OnAdornmentClick="@OnAdornmentClick"
                />
        </DialogContent>
    </MudDialog>
}
else
{
    <MudProgressCircular Indeterminate Color="Color.Info" Size="Size.Large"></MudProgressCircular>
}




@code {
    [Parameter] public string? ComponentName { get; set; }

    [Parameter] public string? UserName { get; set; }

    [SupplyParameterFromQuery] public string? ShareId { get; set; }

    private bool _isExportDialogVisible;

    private void ShowExportOverlay()
    {
        _isExportDialogVisible = true;
        _exportStringRef?.SelectAsync();
    }

    private MudTextField<string>? _exportStringRef;
    private readonly DialogOptions _exportDialogOptions = new() { CloseButton = true, CloseOnEscapeKey = true };

    private GetComponentResponse? _getResponse;
    private ComponentSource? _componentSource;

    protected override async Task OnParametersSetAsync()
    {
        if (ShareId is not null)
        {
            var shared = Share.GetItem(ShareId);

            _getResponse = new GetComponentResponse()
            {
                ComponentPage = shared?.Page,
                CurrentComponent = shared?.Component
            };
        }

        if (_getResponse is null && UserName is not null && ComponentName is not null)
        {
            _getResponse = await ComponentService.GetComponent(UserName, ComponentName);
        }

        if (_getResponse is null)
        {
            NavManager.NavigateTo(Routes.General.NotFound);
            return;
        }

        var encodedSource = _getResponse?.CurrentComponent?.ComponentSource ?? "";
        _componentSource = ComponentSource.DecodeExportString(encodedSource).ResultObject;
    }

    private async Task OnAdornmentClick()
    {
        if (_exportStringRef is null)
        {
            return;
        }

        await ClipBoardService.CopyToClipboardAsync(_exportStringRef.Text);
        await _exportStringRef.SelectAsync();
        await _exportStringRef.FocusAsync();

        SnackBar.Add("Copied to Clipboard", Severity.Success);
    }
}