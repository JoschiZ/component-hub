@using MudExtensions.Enums
@using ComponentHub.Client.Components.Features.Components
@using ComponentHub.ApiClients.Models
@inherits LayoutComponentBase

@inject ComponentService ComponentService
@inject NavigationManager NavigationManager

<MudThemeProvider  @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<SnackbarHelper/>
<MudTypographyProvider/>

<MudLayout>
    <MudAppBar Elevation="1" Dense>
        <a href="@Routes.General.Home">
            <MudTextM3 Typo="TypoM3.Display" Size="Size.Medium" Class="ml-3">ComponentHub</MudTextM3>
        </a>
        <MudSpacer/>
        <MudAutocomplete
            Label="Search Component"
            Dense
            Margin="Margin.Dense"
            T="@ComponentPageDto"
            SearchFuncWithCancel="@SearchComponent"
            ResetValueOnEmptyText
            CoerceText
            ShowProgressIndicator
            ToStringFunc="@(dto => dto.Name ?? "UNNAMED COMPONENT")"
            ValueChanged="@OnSearchValueChanged"
            AdornmentIcon="@Icons.Material.Filled.Search"
            Variant="Variant.Filled"
            DisableUnderLine>
            <NoItemsTemplate>
                <MudTextM3 Color="Color.Error">No component found</MudTextM3>
            </NoItemsTemplate>
        </MudAutocomplete>
        <MudTooltip Text="Detailed search">
            <MudIconButton Icon="@Icons.Material.Filled.ManageSearch" Href="@Routes.Components.SearchPage"/>
        </MudTooltip>
        <MudSpacer/>
        <MudStack Row Spacing="2">
            <AuthorizeView>
                <Authorized>
                    <MudButton Href="@Routes.Components.Upload" Variant="Variant.Filled" Color="Color.Primary">Create Component</MudButton>
                    <MudButton Href="@Routes.Users.PrivateProfile" Variant="Variant.Filled" Color="Color.Info">PROFILE</MudButton>
                </Authorized>
            </AuthorizeView>
            <LogoutLogin/>
        </MudStack>

    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="padding-top: 12px">
            @Body    
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;

    private MudTheme _theme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Roboto", "Poppins", "Helvetica", "sans-serif" }
            }
        }
    };
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }
    
    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<ComponentPageDto>> SearchComponent(string componentName, CancellationToken ct)
    {
        if (string.IsNullOrWhiteSpace(componentName) || componentName.Length < 3)
        {
            return Enumerable.Empty<ComponentPageDto>();
        }
        
        var components = await ComponentService.QueryComponents(componentName, pageSize: 10, ct: ct);
        return components?.Components ?? [];
    }

    private void OnSearchValueChanged(ComponentPageDto? componentPageDto)
    {
        if (componentPageDto?.Name is null || componentPageDto.OwnerName is null)
        {
            return;
        }
        
        NavigationManager.NavigateTo(Routes.Components.GetComponentPage(componentPageDto.OwnerName, componentPageDto.Name));
    }
    
}