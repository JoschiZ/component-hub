// <auto-generated />
using System;
using System.Collections.Generic;
using ComponentHub.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComponentHub.DB.Migrations
{
    [DbContext(typeof(ComponentHubContext))]
    [Migration("20240118002349_Added Component Tags")]
    partial class AddedComponentTags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.ArchivedComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ComponentPageId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Component", "ComponentHub.Domain.Features.Components.ArchivedComponent.Component#Component", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("ComponentPageId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id", "ArchivedAt");

                    b.HasIndex("ComponentPageId");

                    b.ToTable("ArchivedComponent");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentPageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentPageId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentPageId")
                        .IsUnique();

                    b.ToTable("Component");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.ComponentPage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId", "Name")
                        .IsUnique();

                    b.ToTable("Components");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.ComponentTag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ComponentTag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "World of Warcraft"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Damage"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tank"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Healer"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Death Knight"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Blood Death Knight"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Unholy Death Knight"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Frost Death Knight"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Demon Hunter"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Vengeance Demon Hunter"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Devastation Demon Hunter"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Druid"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Balance Druid"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Feral Druid"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Guardian Druid"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Restoration Druid"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Evoker"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Devastation Evoker"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Preservation Evoker"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Augmentation Evoker"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Hunter"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Beast Mastery Hunter"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Marksmanship Hunter"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Survival Hunter"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Mage"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Arcane Mage"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Fire Mage"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Frost Mage"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Monk"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Brewmaster Monk"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Mistweaver Monk"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Windwalker Monk"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Paladin"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Holy Paladin"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Protection Paladin"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Retribution Paladin"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Priest"
                        },
                        new
                        {
                            Id = 38,
                            Description = "Discipline Priest"
                        },
                        new
                        {
                            Id = 39,
                            Description = "Holy Priest"
                        },
                        new
                        {
                            Id = 40,
                            Description = "Shadow Priest"
                        },
                        new
                        {
                            Id = 41,
                            Description = "Rogue"
                        },
                        new
                        {
                            Id = 42,
                            Description = "Assassination Rogue"
                        },
                        new
                        {
                            Id = 43,
                            Description = "Outlaw Rogue"
                        },
                        new
                        {
                            Id = 44,
                            Description = "Subtlety Rogue"
                        },
                        new
                        {
                            Id = 45,
                            Description = "Shaman"
                        },
                        new
                        {
                            Id = 46,
                            Description = "Elemental Shaman"
                        },
                        new
                        {
                            Id = 47,
                            Description = "Enhancement Shaman"
                        },
                        new
                        {
                            Id = 48,
                            Description = "Restoration Shaman"
                        },
                        new
                        {
                            Id = 49,
                            Description = "Warlock"
                        },
                        new
                        {
                            Id = 50,
                            Description = "Affliction Warlock"
                        },
                        new
                        {
                            Id = 51,
                            Description = "Demonology Warlock"
                        },
                        new
                        {
                            Id = 52,
                            Description = "Destruction Warlock"
                        },
                        new
                        {
                            Id = 53,
                            Description = "Retail"
                        },
                        new
                        {
                            Id = 54,
                            Description = "Amirdrassil"
                        },
                        new
                        {
                            Id = 55,
                            Description = "Gnalroot"
                        },
                        new
                        {
                            Id = 56,
                            Description = "Igira the Cruel"
                        },
                        new
                        {
                            Id = 57,
                            Description = "Volcoross"
                        },
                        new
                        {
                            Id = 58,
                            Description = "Larodar, Keeper of the Flame"
                        },
                        new
                        {
                            Id = 59,
                            Description = "Council Of Dreams: Urctos, Aerwynn, Pip"
                        },
                        new
                        {
                            Id = 60,
                            Description = "Nymue, Weaver of the Cycle"
                        },
                        new
                        {
                            Id = 61,
                            Description = "Smolderon, the Firelord"
                        },
                        new
                        {
                            Id = 62,
                            Description = "Tindral, Seer of the Flame"
                        },
                        new
                        {
                            Id = 63,
                            Description = "Fyrakk, the Blazing"
                        },
                        new
                        {
                            Id = 64,
                            Description = "Mythic+ DF Season 3"
                        },
                        new
                        {
                            Id = 65,
                            Description = "Dawn of the Infinite"
                        },
                        new
                        {
                            Id = 66,
                            Description = "Murozond's Rise"
                        },
                        new
                        {
                            Id = 67,
                            Description = "Galakrond's Fall"
                        },
                        new
                        {
                            Id = 68,
                            Description = "Waycrest Manor"
                        },
                        new
                        {
                            Id = 69,
                            Description = "Darkheart Thicket"
                        },
                        new
                        {
                            Id = 70,
                            Description = "Atal'Dazar"
                        },
                        new
                        {
                            Id = 71,
                            Description = "Black Rook Hold"
                        },
                        new
                        {
                            Id = 72,
                            Description = "The Everbloom"
                        },
                        new
                        {
                            Id = 73,
                            Description = "Throne of the Tides"
                        },
                        new
                        {
                            Id = 74,
                            Description = "World of Warcraft Classic"
                        },
                        new
                        {
                            Id = 75,
                            Description = "Final Fantasy"
                        },
                        new
                        {
                            Id = 76,
                            Description = "Elder Scrolls Online"
                        },
                        new
                        {
                            Id = 77,
                            Description = "Star Wars the Old Republic"
                        });
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Users.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ComponentPageComponentTag", b =>
                {
                    b.Property<Guid>("PagesId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("PagesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ComponentPageComponentTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.ArchivedComponent", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Components.ComponentPage", "ComponentPage")
                        .WithMany("ComponentHistory")
                        .HasForeignKey("ComponentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentPage");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.Comment", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Components.ComponentPage", "ComponentPage")
                        .WithMany("Comments")
                        .HasForeignKey("ComponentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentPage");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.Component", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Components.ComponentPage", "ComponentPage")
                        .WithOne("Component")
                        .HasForeignKey("ComponentHub.Domain.Features.Components.Component", "ComponentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentPage");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.ComponentPage", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Users.ApplicationUser", "Owner")
                        .WithMany("Components")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ComponentPageComponentTag", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Components.ComponentPage", null)
                        .WithMany()
                        .HasForeignKey("PagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComponentHub.Domain.Features.Components.ComponentTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<ComponentHub.Domain.Features.Users.UserId>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<ComponentHub.Domain.Features.Users.UserId>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComponentHub.Domain.Features.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ComponentHub.Domain.Features.Users.UserId>", b =>
                {
                    b.HasOne("ComponentHub.Domain.Features.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Components.ComponentPage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Component")
                        .IsRequired();

                    b.Navigation("ComponentHistory");
                });

            modelBuilder.Entity("ComponentHub.Domain.Features.Users.ApplicationUser", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
